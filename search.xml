<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[解决ant-design Select、TimePicker等组件在非body出现滚动条时，滚动时位置bug]]></title>
    <url>%2F2019%2F03%2F13%2F%E8%A7%A3%E5%86%B3ant-design-Select%E3%80%81TimePicker%E7%AD%89%E7%BB%84%E4%BB%B6%E5%9C%A8%E9%9D%9Ebody%E5%87%BA%E7%8E%B0%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%97%B6%EF%BC%8C%E6%BB%9A%E5%8A%A8%E6%97%B6%E4%BD%8D%E7%BD%AEbug%2F</url>
    <content type="text"><![CDATA[问题描述在使用antd插件的，Select、TimePicker等组件时，我们把这些组件放置到某节点，并且这个节点存在滚动条时，当这个节点滚动时，弹出的option层、日历选择层等停留在原有位置，不跟随滚动。比如将这类控件放到Modal里、放到Table里等（放入的这些控件自己设置了overflow:auto）。 可以看到在Modal框中放入Select选择框、DatePicker控件，并且当页面有滚动时，Option层及日历选择层并没有随着页面的滚动而滚动。 如下可实际操作 See the Pen 基本 - Ant Design Demo by Wayne (@aiheguozhi) on CodePen. 原因弹出层放到了和初始节点不同的节点中，这样导致了弹出层是相对与父节点或者body进行绝对定位，但是当初始节点在一个带滚动的节点时，当用户使用鼠标上下滚动时，会造成弹出层（option层或者日期选择层）不会随着浏览器的滚动而滚动。 解决办法将弹出的层放到了和初始展示节点放到同一个父节点中，弹出层相对于这个父节点进行绝对定位。 根据Antd的API做一下绝对定位即可，Select对应的属性是getPopupContainerDatePicker对应的属性为getCalendarContainer 代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960const &#123; Modal, Button, Select,DatePicker &#125; = antd;class App extends React.Component &#123; state = &#123; visible: false &#125; showModal = () =&gt; &#123; this.setState(&#123; visible: true, &#125;); &#125; handleOk = (e) =&gt; &#123; console.log(e); this.setState(&#123; visible: false, &#125;); &#125; handleCancel = (e) =&gt; &#123; console.log(e); this.setState(&#123; visible: false, &#125;); &#125; render() &#123; const &#123; Option &#125; = Select; return ( &lt;div&gt; &lt;Button type="primary" onClick=&#123;this.showModal&#125;&gt; Open Modal &lt;/Button&gt; &lt;Modal title="Basic Modal" visible=&#123;this.state.visible&#125; onOk=&#123;this.handleOk&#125; onCancel=&#123;this.handleCancel&#125; &gt; &lt;div style=&#123;&#123; position: 'relative' &#125;&#125; id="modalArea"&gt; &lt;Select placeholder="请选择" style=&#123;&#123;width: '100px'&#125;&#125; getPopupContainer=&#123;() =&gt; document.getElementById('modalArea')&#125; &gt; &lt;Option value=&#123;1&#125;&gt;1&lt;/Option&gt; &lt;Option value=&#123;2&#125;&gt;2&lt;/Option&gt; &lt;/Select&gt; &lt;br /&gt; &lt;br /&gt; &lt;DatePicker getCalendarContainer=&#123;() =&gt; document.getElementById('modalArea')&#125; /&gt; &lt;/div&gt; &lt;/Modal&gt; &lt;/div&gt; ); &#125;&#125;ReactDOM.render(&lt;App /&gt;, mountNode); See the Pen ant design modal 固定浮层 by wayne (@aiheguozhi) on CodePen. 参考链接：Antd Select]]></content>
      <tags>
        <tag>React</tag>
        <tag>AntDesign</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 上安装 MySQL]]></title>
    <url>%2F2019%2F03%2F01%2F%E2%80%9CWindows-%E4%B8%8A%E5%AE%89%E8%A3%85-MySQL%2F</url>
    <content type="text"><![CDATA[Windows 上安装 MySQLMySQL下载地址为：MySQL 下载。 挑选你需要的 MySQL Community Server 版本及对应的平台。 点击 Download 按钮进入下载页面，点击下图中的 No thanks, just start my download. 就可立即下载。 下载完后，我们将 zip 包解压到相应的目录，这里我将解压后的文件夹放在 D:\web\mysql-8.0.15 下。 然后新建 MySQL 的配置文件 打开刚刚解压的文件夹 D:\web\mysql-8.0.15，在该文件夹下创建 my.ini 配置文件，编辑 my.ini 配置以下基本信息：123456789101112131415161718[mysql]# 设置mysql客户端默认字符集default-character-set=utf8 [mysqld]# 设置3306端口port = 3306# 设置mysql的安装目录# **注意：这里设置成你的目录**basedir=D:\\web\\mysql-8.0.15# 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错# datadir=D:\\web\\sqldata# 允许最大连接数max_connections=20# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB 然后启动下 MySQL 数据库 以管理员身份打开 cmd 命令行工具，切换目录： 1cd D:\web\mysql-8.0.15\bin 初始化数据库： 12mysqld --initialize --console 执行完成后，会输出 root 用户的初始默认密码 这个后续登录需要用到，而且登陆后MySQL后需要修改密码。 启动输入以下命令：1net start mysql 登录 MySQL1mysql -h 主机名 -u 用户名 -p 参数说明： -h : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略; -u : 登录的用户名; -p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。 登陆本机的MySQL1mysql -u root -p 按回车确认, 如果安装正确且 MySQL 正在运行, 会得到以下响应:1Enter password: 若密码存在, 输入密码登录, 不存在则直接按回车登录。登录成功后你将会看到 Welecome to the MySQL monitor… 的提示语。 然后命令提示符会一直以 mysq&gt; 加一个闪烁的光标等待命令的输入, 输入 exit 或 quit 退出登录。 第一次登陆以后，你会发现输入任何命令都是无效的，MySQL会提示你修改密码，根据提示修改密码： 1alter user 'root'@'localhost' identified by 'your password' password expire never; password expire never: 密码永不过期。 参考链接：MySQL 安装]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[antd table(表格)固定列后某一列显示不完全问题]]></title>
    <url>%2F2019%2F02%2F11%2Fantd-table-%E8%A1%A8%E6%A0%BC-%E5%9B%BA%E5%AE%9A%E5%88%97%E5%90%8E%E6%9F%90%E4%B8%80%E5%88%97%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%AE%8C%E5%85%A8%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题使用 antd 表格进行数据展示时，对于列数很多的数据，可以固定前后的列，横向滚动查看其它数据，可以 scroll.x 配合使用。但是其中也会遇到一些问题，在表格固定列后，非固定列会有显示不完全或者无法显示的问题。 在上图的表格的第五列，可以看到，使用 antd 表格的 scroll.x 属性后，其无法完全显示。 解决办法这是因为使用 antd table 的 scroll 属性后，实际上生成的是两个表格了，一个是类名为ant-table-scroll（表格1）的表格，一个是类名为ant-table-fixed-left（表格2）的表格，在表格2的tbody tr td div span的宽度会随着内容宽度变化而变化，就算设置了overflow:hidden后，对表格2不会生效。所以当span的内容越长的时候，就会把父级div无限撑开，导致后面的非固定列无法完全显示或者完全不显示。我的处理方法是对于非固定列的前一列添加一个类名，并设置固定宽度，超出部分隐藏起来就好了。 当然，如果你table的columns是像我下面这么写的1234567891011121314151617181920212223const columns = [ &#123; column1 &#125;, &#123; column2 &#125;, ... &#123; title: '复用段名称', render: (text, record) =&gt; ( &lt;div className="record-name"&gt; &lt;span title=&#123;record.multiplexName&#125;&gt;&#123;record.multiplexName&#125;&lt;/span&gt; &lt;/div&gt; ), dataIndex: 'multiplexName', align: 'left', width: '7.5rem', // width: '8%', fixed: 'left', &#125;, ...]; record-name就是设置的类名给类名设置样式12345678.record-name &#123; width: px2rem(120); // 自己封装的 px 2 rem 方法 overflow: hidden; white-space: nowrap; text-overflow: ellipsis; word-break: keep-all; text-align: left;&#125; 注意：最后可能还需要让非固定列的第一列靠右或者剧中对齐，如果你没有设置的话，或者你设置的表格的列对齐方式为左对齐。 问题解决！]]></content>
      <tags>
        <tag>React</tag>
        <tag>AntDesign</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客图床之七牛云&配置CNAME]]></title>
    <url>%2F2019%2F01%2F23%2F%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A%E4%B9%8B%E4%B8%83%E7%89%9B%E4%BA%91-%E9%85%8D%E7%BD%AECNAME%2F</url>
    <content type="text"><![CDATA[背景因为七牛云现在不提供外链而且系统默认的外链有效期只有一个月，所以想要继续使用七牛云做为博客图床的话，就必须要自己去注册一个域名做为图床的外链。 注册七牛云注册的话，可以去七牛云的官网注册，不记得要不要实名认证了，然后打开控制台–对象存储，需要新建一个存储空间，名字自己命名一个就好了。然后点击“绑定域名” 在绑定域名的时候会有一个“域名类型选择”，这个后面设置CNAM的时候会用到，先暂时不说，按照自己的需要选择 一切都选好之后，点击“创建”按钮就可以了 CNAME配置获取CNAME值在 七牛开发者平台 页面选择 融合CDN ，选择 域名管理 ，将鼠标移动到您需要配置的 域名 后，会出现蓝色字样 复制CNAME ，如下图所示，点击即可复制CNAME值。 添加CNAME记录添加CNAME记录需要在您的域名厂商处配置，比如您在阿里云/腾讯云/新网等处购买的域名，您需要前往购买域名的厂商的相应控制台配置做域名解析。1、打开您购买域名的厂商官网，登陆后在页面右上角找到 控制台。 2、在控制台中，找到您的域名解析页面，例如：阿里云：在控制台页面的左侧，产品与服务栏中选择 域名。腾讯云：在控制台的云产品中，搜索并选择 云解析。DNSPOD：在控制台页面左侧，选择 域名。 3、在域名列表中找到您加速域名对应的主域名，点击域名后面的“解析设置”或“解析”，进入解析设置页。 4、选择“添加记录”，依次填写主机记录，记录类型以及记录值，其他可设为默认值，如果您不清楚如何填写主机记录和记录值，请参考下文提供的示例。 例如，记录类型请选择为CNAME，主机记录为主域名的前缀，假设购买的域名为‘qiniu.com’，这是一个一级域名： 您在七牛创建了普通域名加速域名为 qiniu.com ，主机记录为@加速域名为 cdn.qiniu.com ，主机记录为 cdn加速域名为 img.cdn.qiniu.com ，主机记录为 img.cdn 1上面的普通域名，就是你在绑定域名时选择的，这里一定要对应你选择的“域名类型”，不然在CNAME设置的时候会一直失败！！！ 您在七牛创建了创建了泛域名加速域名为 .qiniu.com ，主机记录为 加速域名为 .img.qiniu.com ，主机记录为 .img 顺便附上我的七牛云邀请链接，有需要的小伙伴可以通过我的邀请链接注册，😄。参考文章：如何配置域名的 CNAME]]></content>
      <tags>
        <tag>前端</tag>
        <tag>七牛云</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + Github 搭建博客]]></title>
    <url>%2F2019%2F01%2F18%2FHexo-Github-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前期准备工作1、NodeJs、Github、Git等准备工作请参考技术小白搭建个人博客 github+hexo 2、本地配置多个ssh key我们的机器上会有很多的git host,比如公司gitlab、github、oschina等，那我们就需要在本地配置多个ssh key，使得不同的host能使用不同的ssh key ,做法如下（以公司gitlab和github为例） 具体可参考GitLab配置ssh key&ensp;&ensp;&ensp;&ensp;GitLab配置ssh key 当配置好后，需要注意的是config文件的配置，按照与下图对应的配置好就可以了。 这是说明样例 这是我自己的config配置 搭建Hexo博客npm 命令安装hexo1npm install -g hexo 创建你的博客项目文件夹安装完成后，关掉前面那个 Git Bash 窗口。在本地创建一个与 GitHub 上 Repository 中博客项目同名的文件夹（如E:\username.github.io）在文件夹上点击鼠标右键，选择 Git bash here；（username即你注册的github的用户名） 【提示】在进行博客搭建工作时，每次使用命令都要在 E:\username.github.io 目录下。 执行命令1hexo init Hexo 就会自动在 E:\username.github.io 文件夹创建你的博客所需要的所有文件。 安装依赖包1npm install 确保git部署12npm i hexo-deployer-git --save # 通过hexo d 命令将本地改动上传至github上，类似于git push（i 即 install）npm install hexo-generator-searchdb --save # 搜索功能依赖 本地查看与调试现在已经搭建好本地的 Hexo 博客了，执行命令12hexo g # hexo generatehexo s # hexo server 在浏览器中输入 localhost:4000 即可查看 注意：每进行相应改动都要 hexo g 生成一下然后再 hexo s 启动服务预览，当本地修改和浏览器或者线上不一致时，可以尝试一下 hexo clean 命令，然后再执行上面两个命令Hexo主题进入你博客站点的根目录(即上面说的E:\username.github.io目录)找到themes文件夹并打开，鼠标右击 git bash here。把从主题的repository复制的地址复制进去，并回车。1git clone git@github.com:iissnan/hexo-theme-next.git 我下载的是next主题，你也可以根据自己的喜好，选择不一样的主题，hexo 主题 然后再站点的根目录下找到_config.yml文件，找到theme，把它更换成与你下载下来的主题的文件夹的名字一致。 如果要对下载的主题进行修改，可以参考next的署名文档，上面有非常详细的说明。hexo-theme-next说明文档 下面是我的站点根目录下_config.yml文件的一些配置（修改主题的配置需要去下载的主题的文件夹下的_config.yml文件中修改）12345678910111213141516171819202122232425262728# Sitetitle: Wayne's Blogsubtitle: Welcome to My Blogdescription: Like Juiceskeywords:author: Waynelanguage: zh-Hanstimezone: Asia/Shanghai# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://weixianpin.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-next# Deployment## Docs: https://hexo.io/docs/deployment.html### 这个deploy就是你 github 仓库与本地项目关联的配置deploy: type: git repository: git@github.com:weixianpin/aiheguozhi.github.io.git ### 换成你自己的 GitHub 仓库 branch: master 将博客部署到GitHub上1hexo d 博客的图床，即在文章内插入图片如果把所有的图片都放在本地，最后都推送到GitHub上，这样最后把你的仓库撑爆的，所以我们需要一个存放图片的地方，我用的是七牛云，可见我的这篇博客，里面有关于使用七牛云图床的介绍。 参考文章 技术小白搭建个人博客 github+hexo Hexo搭建博客教程 GitHub+Hexo 搭建个人网站详细教程]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 语法]]></title>
    <url>%2F2019%2F01%2F16%2FMarkdown-%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[README目录 横线 标题 文本 普通文本 单行文本 多行文本 文字高亮 换行 斜体 粗体 删除线 图片 来源于网络的图片 GitHub仓库中的图片 链接 文字超链接 链接外部URL 链接本仓库的URL 锚点 列表 无序列表 有序列表 复选框列表 块引用 代码高亮 表格 表情 diff语法 横线 ***、—、___可以显示横线效果 1234如下所示：***---___ 标题123456# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 一级标题二级标题三级标题四级标题五级标题六级标题文本普通文本这是一段普通的文本 单行文本1 Hi,我是Wayne(前面有四个空格) Hi,我是Wayne 在一行开头加入1个Tab或者4个空格。 文本块语法1在连续几行的文本开头加入1个Tab或者4个空格。 欢迎到访 很高兴见到您 祝您，早上好 语法2使用一对各三个的反引号：就是英文输入法下数字1左边的键123欢迎到访欢迎到访祝您，早上好，中午好，下午好，晚安 该语法也可以实现代码高亮，见代码高亮 文字高亮文字高亮功能能使行内部分文字高亮，使用一对反引号。语法：1`linux` `网络编程` `socket` `epoll` 效果：linux 网络编程 socket epoll 也适合做一篇文章的tag 换行直接回车不能换行，可以在上一行文本后面补两个空格，这样下一行的文本就换行了。 或者就是在两行文本直接加一个空行。 也能实现换行效果，不过这个行间距有点大。 斜体、粗体、删除线 语法 效果 *斜体1* 斜体1 _斜体2_ 斜体2 **粗体1** 粗体1 __粗体2__ 粗体2 这是一个 ~~删除线~~ 这是一个 删除线 ***斜粗体1*** 斜粗体1 ___斜粗体2___ 斜粗体2 ***~~斜粗体删除线1~~*** 斜粗体删除线1 ~~***斜粗体删除线2***~~ 斜粗体删除线2 斜体、粗体、删除线可混合使用 这个表格在网页上可能显示出来，请到该处查看,以下表格同理。 图片 基本格式：1![alt](URL title) alt和title即对应HTML中的alt和title属性（都可省略）： alt表示图片显示失败时的替换文本 title表示鼠标悬停在图片时的显示文本（注意这里要加引号） URL即图片的url地址，如果引用本仓库中的图片，直接使用相对路径就可了，如果引用其他github仓库中的图片要注意格式，即：仓库地址/raw/分支名/图片路径，如：1https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif 图片链接给图片加链接的本质是混合图片显示语法和普通的链接语法。普通的链接中[ ]内部是链接要显示的文本，而图片链接[ ]里面则是要显示的图片。直接混合两种语法当然可以，但是十分啰嗦，为此我们可以使用URL标识符的形式。 # 语法 效果 1 ![baidu](http://www.baidu.com/img/bdlogo.gif) 链接链接外部URL # 语法 效果 1 [我的博客](https://weixianpin.github.io &quot;悬停显示&quot;) 我的博客 链接本仓库里的URL 语法 效果 [我的简介](/example/profile.md) 我的简介 [Book](./Book) Book 因为图片本身和链接本身都支持URL标识符的形式，所以图片链接也可以很简洁（见例3）。注意，此时鼠标悬停时显示的文字是图片的title，而非链接本身的title了。 本文URL标识符都放置于文末 锚点其实呢，每一个标题都是一个锚点，和HTML的锚点（#）类似，比如我们 语法 效果 [回到顶部](#readme) 回到顶部 不过要注意，标题中的英文字母都被转化为小写字母了。 以前GitHub对中文支持的不好，所以中文标题不能正确识别为锚点，但是现在已经没问题啦！ 列表无序列表123* 昵称：1234- 别名：4321* 英文名：Leo 昵称：1234 别名：4321 英文名：Leo 多级无序列表123* 编程语言 * 脚本语言 * Python 编程语言 脚本语言 Python 有序列表一般效果就是在数字后面加一个点，再加一个空格。不过看起来起来可能不够明显。面向对象的三个基本特征： 封装 继承 多态 有序列表自动排序也可以在第一行指定1.，而接下来的几行用星号*（或者继续用数字1. ）就可以了，它会自动显示成2、3、4……。面向对象的七大原则： 开闭原则 里氏转换原则 依赖倒转原则 接口隔离原则 组合/聚合复用原则 “迪米特”法则 单一职责原则 多级有序列表和无序列表一样，有序列表也有多级结构： 这是一级的有序列表，数字1还是1 这是二级的有序列表，阿拉伯数字在显示的时候变成了罗马数字 这是三级的有序列表，数字在显示的时候变成了英文字母 四级的有序列表显示效果，就不再变化了，依旧是英文字母 复选框列表 需求分析 系统设计 详细设计 编码 测试 交付 您可以使用这个功能来标注某个项目各项任务的完成情况。 Tip: 在GitHub的issue中使用该语法是可以实时点击复选框来勾选或解除勾选的，而无需修改issue原文。 块引用常用于引用文本文本摘自《深入理解计算机系统》P27 令人吃惊的是，在哪种字节顺序是合适的这个问题上，人们表现得非常情绪化。实际上术语“little endian”（小端）和“big endian”（大端）出自Jonathan Swift的《格利佛游记》一书，其中交战的两个派别无法就应该从哪一端打开一个半熟的鸡蛋达成一致。因此，争论沦为关于社会政治的争论。只要选择了一种规则并且始终如一的坚持，其实对于哪种字节排序的选择都是任意的。 “端”（endian）的起源以下是Jonathan Swift在1726年关于大小端之争历史的描述：“……下面我要告诉你的是，Lilliput和Blefuscu这两大强国在过去36个月里一直在苦战。战争开始是由于以下的原因：我们大家都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端，可是当今的皇帝的祖父小时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝，就下了一道敕令，命令全体臣民吃鸡蛋时打破较小的一端，违令者重罚。” 块引用有多级结构12345&gt; 数据结构&gt;&gt; 树&gt;&gt;&gt; 二叉树&gt;&gt;&gt;&gt; 平衡二叉树&gt;&gt;&gt;&gt;&gt; 满二叉树 数据结构 树 二叉树 平衡二叉树 满二叉树 代码高亮在三个反引号后面加上编程语言的名字，另起一行开始写代码，最后一行再加上三个反引号。1public static void main(String[]args)&#123;&#125; //Java 1int main(int argc, char *argv[]) //C 1echo "hello GitHub" #Bash 1document.getElementById("myH1").innerHTML="Welcome to my Homepage"; //javascipt 1string &amp;operator+(const string&amp; A,const string&amp; B) //cpp 表格 123456记得表头要与上一行换行| 表头1 | 表头2|| ---------- | -----------|| 表格单元 | 表格单元 || 表格单元 | 表格单元 | 表头1 表头2 表格单元 表格单元 表格单元 表格单元 对齐表格可以指定对齐方式 12345| 左对齐 | 居中 | 右对齐 || :------------ |:---------------:| -----:|| col 3 is | some wordy text | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | 左对齐 居中 右对齐 col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 混合其他语法表格单元中的内容可以和其他大多数GFM语法配合使用，如： 使用普通文本的删除线，斜体等效果1234| 名字 | 描述 || ------------- | ----------- || Help | ~~Display the~~ help window.|| Close | _Closes_ a window | 名字 描述 Help Display the help window. Close Closes a window 表情Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。 比如:blush:，可以显示:blush:。 具体每一个表情的符号码，可以查询GitHub的官方网页http://www.emoji-cheat-sheet.com。 diff语法版本控制的系统中都少不了diff的功能，即展示一个文件内容的增加与删除。GFM中可以显示的展示diff效果。使用绿色表示新增，红色表示删除。 其语法与代码高亮类似，只是在三个反引号后面写diff，并且其内容中，以 +开头表示新增，-开头表示删除。 效果如下： 12+ 鸟宿池边树，僧敲月下门- 鸟宿池边树，僧推月下门 参考资料：http://blog.csdn.net/kaitiren/article/details/38513715]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <url>%2F2019%2F01%2F15%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
